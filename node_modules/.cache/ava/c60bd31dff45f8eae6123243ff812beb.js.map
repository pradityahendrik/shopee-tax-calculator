{"version":3,"sources":["tests/unit/bill.test.js"],"names":["Promise","require","test","sinon","method","repository","createSandbox","usingPromise","serial","t","context","sandbox","stub","resolves","response","getBill","console","log","deepEqual","meta","price_subtotal","tax_subtotal","grand_total","data","id","name","tax_code","price","code","type","refundable","tax","amount","err","fail","message","beforeEach","afterEach","always","restore"],"mappings":"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","sourceRoot":"/Users/pradityahendrik/shopee","sourcesContent":["'use strict';\n\nconst Promise = require('bluebird');\nconst test = require('ava');\nconst sinon = require('sinon');\nconst method = require('../../methods/bill');\nconst repository = require('../../repositories/bill');\n\nsinon.createSandbox().usingPromise(Promise.Promise);\n\ntest.serial('[SUCCESS] Find All Data', async (t) => {\n    t.context.sandbox.stub(repository, 'getBill').resolves([\n        {\n            \"id\": 1,\n            \"name\": \"Pizza\",\n            \"tax_code\": \"1\",\n            \"price\": 12000,\n            \"code\": 1,\n            \"type\": \"Food & Beverage\",\n            \"refundable\": \"1\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Burger\",\n            \"tax_code\": \"2\",\n            \"price\": 10000,\n            \"code\": 2,\n            \"type\": \"Tobacco\",\n            \"refundable\": \"0\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Cola\",\n            \"tax_code\": \"3\",\n            \"price\": 8000,\n            \"code\": 3,\n            \"type\": \"Entertainment\",\n            \"refundable\": \"0\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Coke\",\n            \"tax_code\": \"3\",\n            \"price\": 80,\n            \"code\": 3,\n            \"type\": \"Entertainment\",\n            \"refundable\": \"0\"\n        }\n    ]);\n\n    try {\n        const response = await method.getBill();\n        console.log(response);\n        \n        t.deepEqual(response, { meta: { price_subtotal: 30080, tax_subtotal: 2479, grand_total: 32559 },\n            data: \n             [ { id: 1,\n                 name: 'Pizza',\n                 tax_code: '1',\n                 price: 12000,\n                 code: 1,\n                 type: 'Food & Beverage',\n                 refundable: 'Yes',\n                 tax: 1200,\n                 amount: 13200 },\n               { id: 2,\n                 name: 'Burger',\n                 tax_code: '2',\n                 price: 10000,\n                 code: 2,\n                 type: 'Tobacco',\n                 refundable: 'No',\n                 tax: 1200,\n                 amount: 11200 },\n               { id: 3,\n                 name: 'Cola',\n                 tax_code: '3',\n                 price: 8000,\n                 code: 3,\n                 type: 'Entertainment',\n                 refundable: 'No',\n                 tax: 79,\n                 amount: 8079 },\n               { id: 4,\n                 name: 'Coke',\n                 tax_code: '3',\n                 price: 80,\n                 code: 3,\n                 type: 'Entertainment',\n                 refundable: 'No',\n                 tax: 0,\n                 amount: 80 } ] });\n    } catch (err) {\n        t.fail(err.message);\n    }\n});\n\ntest.serial('[SUCCESS] Return empty data', async (t) => {\n    t.context.sandbox.stub(repository, 'getBill').resolves([]);\n\n    try {\n        const response = await method.getBill();\n        t.deepEqual(response, []);\n    } catch (err) {\n        t.fail(err.message);\n    }\n});\n\ntest.beforeEach('Initialize New Sandbox Before Each Test', async (t) => {\n    t.context.sandbox = sinon.createSandbox().usingPromise(Promise.Promise);\n});\n\ntest.afterEach.always('Restore Sandbox and Configuration After Each Test', async (t) => {\n    t.context.sandbox.restore();\n});\n"]}