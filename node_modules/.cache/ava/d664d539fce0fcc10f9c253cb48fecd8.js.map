{"version":3,"sources":["tests/unit/bill.test.js"],"names":["Promise","require","test","sinon","method","repository","createSandbox","usingPromise","serial","t","context","sandbox","stub","resolves","response","getBill","deepEqual","meta","price_subtotal","tax_subtotal","grand_total","data","id","name","tax_code","price","code","type","refundable","tax","amount","err","fail","message","beforeEach","afterEach","always","restore"],"mappings":"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","sourceRoot":"/Users/pradityahendrik/shopee","sourcesContent":["'use strict';\n\nconst Promise = require('bluebird');\nconst test = require('ava');\nconst sinon = require('sinon');\nconst method = require('../../methods/bill');\nconst repository = require('../../repositories/bill');\n\nsinon.createSandbox().usingPromise(Promise.Promise);\n\ntest.serial('[SUCCESS] Find All Data', async (t) => {\n    t.context.sandbox.stub(repository, 'getBill').resolves([\n        {\n            \"id\": 1,\n            \"name\": \"Pizza\",\n            \"tax_code\": \"1\",\n            \"price\": 12000,\n            \"code\": 1,\n            \"type\": \"Food & Beverage\",\n            \"refundable\": \"1\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Burger\",\n            \"tax_code\": \"2\",\n            \"price\": 10000,\n            \"code\": 2,\n            \"type\": \"Tobacco\",\n            \"refundable\": \"0\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Cola\",\n            \"tax_code\": \"3\",\n            \"price\": 8000,\n            \"code\": 3,\n            \"type\": \"Entertainment\",\n            \"refundable\": \"0\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Coke\",\n            \"tax_code\": \"3\",\n            \"price\": 80,\n            \"code\": 3,\n            \"type\": \"Entertainment\",\n            \"refundable\": \"0\"\n        }\n    ]);\n\n    try {\n        const response = await method.getBill();\n\n        t.deepEqual(response, {\n            meta: { price_subtotal: 30080, tax_subtotal: 2479, grand_total: 32559 },\n            data:\n                [{\n                    id: 1,\n                    name: 'Pizza',\n                    tax_code: '1',\n                    price: 12000,\n                    code: 1,\n                    type: 'Food & Beverage',\n                    refundable: 'Yes',\n                    tax: 1200,\n                    amount: 13200\n                },\n                {\n                    id: 2,\n                    name: 'Burger',\n                    tax_code: '2',\n                    price: 10000,\n                    code: 2,\n                    type: 'Tobacco',\n                    refundable: 'No',\n                    tax: 1200,\n                    amount: 11200\n                },\n                {\n                    id: 3,\n                    name: 'Cola',\n                    tax_code: '3',\n                    price: 8000,\n                    code: 3,\n                    type: 'Entertainment',\n                    refundable: 'No',\n                    tax: 79,\n                    amount: 8079\n                },\n                {\n                    id: 4,\n                    name: 'Coke',\n                    tax_code: '3',\n                    price: 80,\n                    code: 3,\n                    type: 'Entertainment',\n                    refundable: 'No',\n                    tax: 0,\n                    amount: 80\n                }]\n        });\n    } catch (err) {\n        t.fail(err.message);\n    }\n});\n\ntest.serial('[SUCCESS] Return empty data', async (t) => {\n    t.context.sandbox.stub(repository, 'getBill').resolves([]);\n\n    try {\n        const response = await method.getBill();\n\n        t.deepEqual(response, {\n            meta: { price_subtotal: 0, tax_subtotal: 0, grand_total: 0 },\n            data: []\n        });\n    } catch (err) {\n        t.fail(err.message);\n    }\n});\n\ntest.beforeEach('Initialize New Sandbox Before Each Test', async (t) => {\n    t.context.sandbox = sinon.createSandbox().usingPromise(Promise.Promise);\n});\n\ntest.afterEach.always('Restore Sandbox and Configuration After Each Test', async (t) => {\n    t.context.sandbox.restore();\n});\n"]}