{"version":3,"sources":["tests/unit/bill.test.js"],"names":["Promise","require","test","sinon","method","repository","createSandbox","usingPromise","serial","t","context","sandbox","stub","resolves","response","getBill","deepEqual","err","fail","message","rejects","beforeEach","afterEach","always","restore"],"mappings":"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","sourceRoot":"/Users/pradityahendrik/shopee","sourcesContent":["'use strict';\n\nconst Promise = require('bluebird');\nconst test = require('ava');\nconst sinon = require('sinon');\nconst method = require('../../methods/bill');\nconst repository = require('../../repositories/bill');\n\nsinon.createSandbox().usingPromise(Promise.Promise);\n\ntest.serial('[SUCCESS] Find All Data', async (t) => {\n    t.context.sandbox.stub(repository, 'getBill').resolves([\n        {\n            \"id\": 1,\n            \"name\": \"Pizza\",\n            \"tax_code\": \"1\",\n            \"price\": 12000,\n            \"code\": 1,\n            \"type\": \"Food & Beverage\",\n            \"refundable\": \"1\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Burger\",\n            \"tax_code\": \"2\",\n            \"price\": 10000,\n            \"code\": 2,\n            \"type\": \"Tobacco\",\n            \"refundable\": \"0\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"Cola\",\n            \"tax_code\": \"3\",\n            \"price\": 8000,\n            \"code\": 3,\n            \"type\": \"Entertainment\",\n            \"refundable\": \"0\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"Coke\",\n            \"tax_code\": \"3\",\n            \"price\": 80,\n            \"code\": 3,\n            \"type\": \"Entertainment\",\n            \"refundable\": \"0\"\n        }\n    ]);\n\n    try {\n        const response = await method.getBill();\n        t.deepEqual(response, [\n            {\n                \"id\": 1,\n                \"name\": \"Pizza\",\n                \"tax_code\": \"1\",\n                \"price\": 12000,\n                \"code\": 1,\n                \"type\": \"Food & Beverage\",\n                \"refundable\": \"1\"\n            },\n            {\n                \"id\": 2,\n                \"name\": \"Burger\",\n                \"tax_code\": \"2\",\n                \"price\": 10000,\n                \"code\": 2,\n                \"type\": \"Tobacco\",\n                \"refundable\": \"0\"\n            },\n            {\n                \"id\": 3,\n                \"name\": \"Cola\",\n                \"tax_code\": \"3\",\n                \"price\": 8000,\n                \"code\": 3,\n                \"type\": \"Entertainment\",\n                \"refundable\": \"0\"\n            },\n            {\n                \"id\": 4,\n                \"name\": \"Coke\",\n                \"tax_code\": \"3\",\n                \"price\": 80,\n                \"code\": 3,\n                \"type\": \"Entertainment\",\n                \"refundable\": \"0\"\n            }\n        ]);\n    } catch (err) {\n        t.fail(err.message);\n    }\n});\n\ntest.serial('[SUCCESS] Return empty data', async (t) => {\n    t.context.sandbox.stub(repository, 'getBill').resolves([]);\n\n    try {\n        const response = await method.getBill();\n        t.deepEqual(response, []);\n    } catch (err) {\n        t.fail(err.message);\n    }\n});\n\ntest.serial('[FAILED] Error', async (t) => {\n    t.context.sandbox.stub(repository, 'getBill').rejects();\n\n    try {\n        await method.getBill();\n    } catch (err) {\n        t.fail(err.message, {\n            message: 'Error'\n        });\n    }\n});\n\ntest.beforeEach('Initialize New Sandbox Before Each Test', async (t) => {\n    t.context.sandbox = sinon.createSandbox().usingPromise(Promise.Promise);\n});\n\ntest.afterEach.always('Restore Sandbox and Configuration After Each Test', async (t) => {\n    t.context.sandbox.restore();\n});\n"]}