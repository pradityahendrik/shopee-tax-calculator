{"version":3,"sources":["tests/unit/bill.test.js"],"names":["Promise","require","test","sinon","method","repository","createSandbox","usingPromise","serial","t","context","sandbox","stub","resolves","response","findAllUser","deepEqual","data","err","fail","message","rejects","beforeEach","afterEach","always","restore"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,KAAD,CAApB;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,qBAAD,CAAtB;;AACA,MAAMI,UAAU,GAAGJ,OAAO,CAAC,0BAAD,CAA1B;;AAEAE,KAAK,CAACG,aAAN,GAAsBC,YAAtB,CAAmCP,OAAO,CAACA,OAA3C;AAEAE,IAAI,CAACM,MAAL,CAAY,yBAAZ,EAAuC,MAAOC,CAAP,IAAa;AAChDA,EAAAA,CAAC,CAACC,OAAF,CAAUC,OAAV,CAAkBC,IAAlB,CAAuBP,UAAvB,EAAmC,SAAnC,EAA8CQ,QAA9C,CAAuD,CACnD;AACI,UAAM,CADV;AAEI,YAAQ,GAFZ;AAGI,eAAW;AAHf,GADmD,EAMnD;AACI,UAAM,CADV;AAEI,YAAQ,GAFZ;AAGI,eAAW;AAHf,GANmD,CAAvD;;AAaA,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMV,MAAM,CAACW,WAAP,EAAvB;AACAN,IAAAA,CAAC,CAACO,SAAF,CAAYF,QAAQ,CAACA,QAAT,CAAkBG,IAA9B,EAAoC,CAChC;AACI,YAAM,CADV;AAEI,cAAQ,GAFZ;AAGI,iBAAW;AAHf,KADgC,EAMhC;AACI,YAAM,CADV;AAEI,cAAQ,GAFZ;AAGI,iBAAW;AAHf,KANgC,CAApC;AAYH,GAdD,CAcE,OAAOC,GAAP,EAAY;AACVT,IAAAA,CAAC,CAACU,IAAF,CAAOD,GAAG,CAACE,OAAX;AACH;AACJ,CA/BD;AAiCAlB,IAAI,CAACM,MAAL,CAAY,6BAAZ,EAA2C,MAAOC,CAAP,IAAa;AACpDA,EAAAA,CAAC,CAACC,OAAF,CAAUC,OAAV,CAAkBC,IAAlB,CAAuBP,UAAvB,EAAmC,SAAnC,EAA8CQ,QAA9C,CAAuD,EAAvD;;AAEA,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMV,MAAM,CAACW,WAAP,EAAvB;AACAN,IAAAA,CAAC,CAACO,SAAF,CAAYF,QAAQ,CAACA,QAAT,CAAkBG,IAA9B,EAAoC,EAApC;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACVT,IAAAA,CAAC,CAACU,IAAF,CAAOD,GAAG,CAACE,OAAX;AACH;AACJ,CATD;AAWAlB,IAAI,CAACM,MAAL,CAAY,gBAAZ,EAA8B,MAAOC,CAAP,IAAa;AACvCA,EAAAA,CAAC,CAACC,OAAF,CAAUC,OAAV,CAAkBC,IAAlB,CAAuBP,UAAvB,EAAmC,SAAnC,EAA8CgB,OAA9C;;AAEA,MAAI;AACA,UAAMP,QAAQ,GAAG,MAAMV,MAAM,CAACW,WAAP,EAAvB;AACAN,IAAAA,CAAC,CAACO,SAAF,CAAYF,QAAQ,CAACA,QAAT,CAAkBG,IAA9B,EAAoC,IAApC;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACVT,IAAAA,CAAC,CAACU,IAAF,CAAOD,GAAG,CAACE,OAAX;AACH;AACJ,CATD;AAWAlB,IAAI,CAACoB,UAAL,CAAgB,yCAAhB,EAA2D,MAAOb,CAAP,IAAa;AACpEA,EAAAA,CAAC,CAACC,OAAF,CAAUC,OAAV,GAAoBR,KAAK,CAACG,aAAN,GAAsBC,YAAtB,CAAmCP,OAAO,CAACA,OAA3C,CAApB;AACH,CAFD;AAIAE,IAAI,CAACqB,SAAL,CAAeC,MAAf,CAAsB,mDAAtB,EAA2E,MAAOf,CAAP,IAAa;AACpFA,EAAAA,CAAC,CAACC,OAAF,CAAUC,OAAV,CAAkBc,OAAlB;AACH,CAFD","sourceRoot":"/Users/pradityahendrik/shopee","sourcesContent":["'use strict';\n\nconst Promise = require('bluebird');\nconst test = require('ava');\nconst sinon = require('sinon');\nconst method = require('../../methods/users');\nconst repository = require('../../repositories/users');\n\nsinon.createSandbox().usingPromise(Promise.Promise);\n\ntest.serial('[SUCCESS] Find All Data', async (t) => {\n    t.context.sandbox.stub(repository, 'findAll').resolves([\n        {\n            \"id\": 1,\n            \"name\": \"a\",\n            \"address\": \"a\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"b\",\n            \"address\": \"b\"\n        }\n    ]);\n\n    try {\n        const response = await method.findAllUser();\n        t.deepEqual(response.response.data, [\n            {\n                \"id\": 1,\n                \"name\": \"a\",\n                \"address\": \"a\"\n            },\n            {\n                \"id\": 2,\n                \"name\": \"b\",\n                \"address\": \"b\"\n            }\n        ]);\n    } catch (err) {\n        t.fail(err.message);\n    }\n});\n\ntest.serial('[SUCCESS] Return empty data', async (t) => {\n    t.context.sandbox.stub(repository, 'findAll').resolves([]);\n\n    try {\n        const response = await method.findAllUser();\n        t.deepEqual(response.response.data, []);\n    } catch (err) {\n        t.fail(err.message);\n    }\n});\n\ntest.serial('[FAILED] Error', async (t) => {\n    t.context.sandbox.stub(repository, 'findAll').rejects();\n\n    try {\n        const response = await method.findAllUser();\n        t.deepEqual(response.response.data, null);\n    } catch (err) {\n        t.fail(err.message);\n    }\n});\n\ntest.beforeEach('Initialize New Sandbox Before Each Test', async (t) => {\n    t.context.sandbox = sinon.createSandbox().usingPromise(Promise.Promise);\n});\n\ntest.afterEach.always('Restore Sandbox and Configuration After Each Test', async (t) => {\n    t.context.sandbox.restore();\n});\n"]}